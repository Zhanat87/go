# https://docs.docker.com/compose/compose-file/#dns

###############################################################################
# Docker config
###############################################################################

#version: '3'
version: '2'

services:

  # docker exec -it stack-postgres /bin/bash
  # psql -h localhost -U postgres
  # \l or \list - show databases
  # \connect stack - use db
  # \dt - show tables
  # \q - close connection and exit
  # docker inspect stack-postgres
  # docker ps
  # docker-compose up
  # https://hub.docker.com/_/postgres/
  # docker exec -it postgresql psql -U postgres -d go_restful
  postgresql:
    image: postgres:latest
#    restart: always
    container_name: postgresql
    ports:
      - "5433:5432"
    volumes:
#     not work init sql for  create and seed tables
# need run migrations in install.sh a-la 'docker run -it ...'
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
  #  Set environment to use a database
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=go_restful
  #  env_file:
  #    - ./postgres/.env
  #  dns: 8.8.8.8

  ###############################################################################
  # golang
  ###############################################################################

  # docker-compose logs stack-auth
  # docker-compose rm stack-auth
  # docker-compose build golang
  # https://techoverflow.net/2013/10/22/docker-remove-all-images-and-containers/
  # docker-images
  golang:
    image: zhanat87/golang:latest
  #  user: 777:777
#    restart: always
#    build:
#      context: ../
#      dockerfile: Dockerfile
#      args:
#        buildno: 1
#        password: secret
    container_name: golang
#    volumes:
#      - ./bin/go:/go/src/github.com/Zhanat87/go
    links:
      - postgresql
    depends_on:
      - postgresql
#    command: ["./wait-for-postgres.sh", "postgresql", "python", "test.py"]
#    command: ["./wait-for-it.sh", "postgresql:5432", "--", "echo", "postgres is up"]
#      - stack-mongodb
#      - stack-rabbitmq
#    https://docs.docker.com/compose/startup-order/
#    command: ["./wait-for-it.sh", "postgresql:5432", "--", "python", "app.py"]
    ports:
      - "8080:8080"
  # https://github.com/docker/compose/issues/1809
  #  command: exec -it golang /bin/bash echo from golang
#    command:
#      - echo from golang
#      - exec -it golang /go/migrate -url postgres://postgres:postgres@172.17.0.2:5432/go_restful?sslmode=disable -path ./migrations up
  # docker exec -it golang /go/migrate -url postgres://postgres:postgres@172.17.0.2:5432/go_restful?sslmode=disable -path ./migrations up

  ###############################################################################
  # client-nginx
  ###############################################################################

  client-nginx:
    image: phpdockerio/nginx:latest
    container_name: client-nginx
    volumes:
      - ../client:/var/www/client-nginx
  #  Inject configuration via volume
#      - ./client-nginx/nginx.conf:/etc/nginx/conf.d/default.conf
#      - ./client-nginx/passwd:/etc/nginx/conf.d/passwd
      - ./client-nginx:/etc/nginx/conf.d
      - ./client-nginx/logs:/var/log/nginx
    ports:
      - "8081:80"

  # https://hub.docker.com/r/hardware/adminer/
  # порт adminer'а 8888, поэтому его надо перенаправить на 8083,
  # затем можно просто открыть localhost:8083
  adminer:
    image: hardware/adminer
    container_name: adminer
    ports:
      - "8888:8888"
    links:
      - postgresql

  drone-server:
      image: drone/drone:0.5
      ports:
        - 8000:8000
      volumes:
        - ./drone:/var/lib/drone/
      restart: always
      environment:
        - DRONE_OPEN=true
        - DRONE_GITHUB=true
#       https://docs.docker.com/compose/environment-variables/#setting-environment-variables-with-docker-compose-run
        - DRONE_GITHUB_CLIENT=${DRONE_GITHUB_CLIENT}
        - DRONE_GITHUB_SECRET=${DRONE_GITHUB_SECRET}
#        - DRONE_SECRET=${DRONE_SECRET}
        - DRONE_SECRET=test
        - DRONE_AGENT_SECRET=test
  drone-agent:
    image: drone/drone:0.5
    command: agent
    restart: always
    depends_on: [ drone-server ]
#    links:
#      - drone-server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
#      - DRONE_SERVER=ws://zhanat.site:8000/ws/broker
      - DRONE_SERVER=ws://drone-server:8000/ws/broker
#      - DRONE_SECRET=${DRONE_SECRET}
      - DRONE_SECRET=test
      - DRONE_AGENT_SECRET=test

  #stack-mysql:
  ##  image: mariadb
  ##  image: mysql:5.7
  ## latest mysql image === mysql:latest
  #  image: mysql
  #  container_name: stack-mysql
  #  ports:
  ##  Error starting userland proxy: listen tcp 0.0.0.0:3306: bind: address already in use
  ##  нельзя выводить в первый порт такой же который уже занят в системе самим mysql,
  ##  надо менять наружный порт "3306:3306", например на "3333:3306"
  #    - "3333:3306"
  #  environment:
  ##    - MYSQL_USER=heaven11
  ##    - MYSQL_PASSWORD=h4UgSa
  ##    - MYSQL_ROOT_PASSWORD=h4UgSa
  ##    - MYSQL_DATABASE=heaven11-v1
  #    MYSQL_ROOT_PASSWORD: root
  #    MYSQL_DATABASE: stack_db
  ##    MYSQL_USER: dev
  ##    MYSQL_PASSWORD: 123456
  #  volumes:
  #    - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
  ##   restart: always

  #stack-memcached:
  #  image: phpdockerio/memcached:latest
  #  container_name: stack-memcached

  #stack-redis:
  #  image: phpdockerio/redis:latest
  #  container_name: stack-redis

  #stack-mongodb:
  #  image: mongo
  #  container_name: stack-mongodb
  #  ports:
  #    - "27019:27017"
  ##  environment:
  ##    - MONGO_URL=mongodb://mongodb:27019
  #  command:
  #    mongod --smallfiles --quiet --logpath=/dev/null

  #stack-elasticsearch:
  #  build: .
  #  dockerfile: elasticsearch/Dockerfile
  #  container_name: stack-elasticsearch
  #  ports:
  #    - "9200:9200"
  #    - "9300:9300"

  #stack-rabbitmq:
  #  image: rabbitmq:3-management
  #  container_name: stack-rabbitmq
  #  ports:
  #    - "15672:15672"
  #    - "5672:5672"
  #  environment:
  #    - RABBITMQ_DEFAULT_USER=stack-rabbitmq
  #    - RABBITMQ_DEFAULT_PASS=stack-rabbitmq
  #    - RABBITMQ_DEFAULT_VHOST=/

  ################################################################################
  ## dictionary
  ################################################################################

  #stack-dictionary:
  #  build: ../stack-dictionary
  #  restart: always
  #  dockerfile: Dockerfile
  #  container_name: stack-dictionary
  #  volumes:
  #    - ../stack-dictionary:/usr/src/app
  ##  Expose and map ports for containers
  ##  в expose порты, которые должны быть разрешены в firewall
  ##  expose:
  ##    - 3000
  ## как в docker run -p 8081:8081
  #  ports:
  #    - "8081:8081"
  ## как в docker run --link
  #  links:
  #    - stack-mongodb
  ##    - stack-auth
  ##  Label the service
  #  labels:
  #    com.dockerinaction.chapter: "11"
  #    com.dockerinaction.example: "Coffee API"
  #    com.dockerinaction.role: "Application Logic"

  ################################################################################
  ## node.js express
  ################################################################################
  # for node.js app need first run "npm i" local and then build container
  # чтобы обновить новый код в node.js app надо просто перезапустить контейнер
  # docker-compose restart nodejs-express
  #nodejs-express:
  #  build: ../nodejs-express
  #  restart: always
  #  dockerfile: Dockerfile
  #  container_name: nodejs-express
  #  volumes:
  #    - ../nodejs-express:/usr/src/app
  #  ports:
  #    - "8081:8081"
  #  links:
  #    - stack-mongodb
