// Code generated by protoc-gen-go. DO NOT EDIT.
// source: currency.proto

/*
Package currency is a generated protocol buffer package.

It is generated from these files:
	currency.proto

It has these top-level messages:
	EmptyRequest
	ExchangeRateResponse
	ExchangeRatesResponse
*/
package currency

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EmptyRequest struct {
}

func (m *EmptyRequest) Reset()                    { *m = EmptyRequest{} }
func (m *EmptyRequest) String() string            { return proto.CompactTextString(m) }
func (*EmptyRequest) ProtoMessage()               {}
func (*EmptyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// https://developers.google.com/protocol-buffers/docs/proto3#scalar
type ExchangeRateResponse struct {
	Title       string  `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	PubDate     string  `protobuf:"bytes,2,opt,name=pubDate" json:"pubDate,omitempty"`
	Description float32 `protobuf:"fixed32,3,opt,name=description" json:"description,omitempty"`
	Quant       int32   `protobuf:"varint,4,opt,name=quant" json:"quant,omitempty"`
	Index       string  `protobuf:"bytes,5,opt,name=index" json:"index,omitempty"`
	Change      float32 `protobuf:"fixed32,6,opt,name=change" json:"change,omitempty"`
}

func (m *ExchangeRateResponse) Reset()                    { *m = ExchangeRateResponse{} }
func (m *ExchangeRateResponse) String() string            { return proto.CompactTextString(m) }
func (*ExchangeRateResponse) ProtoMessage()               {}
func (*ExchangeRateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ExchangeRateResponse) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ExchangeRateResponse) GetPubDate() string {
	if m != nil {
		return m.PubDate
	}
	return ""
}

func (m *ExchangeRateResponse) GetDescription() float32 {
	if m != nil {
		return m.Description
	}
	return 0
}

func (m *ExchangeRateResponse) GetQuant() int32 {
	if m != nil {
		return m.Quant
	}
	return 0
}

func (m *ExchangeRateResponse) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *ExchangeRateResponse) GetChange() float32 {
	if m != nil {
		return m.Change
	}
	return 0
}

type ExchangeRatesResponse struct {
	Data []*ExchangeRateResponse `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (m *ExchangeRatesResponse) Reset()                    { *m = ExchangeRatesResponse{} }
func (m *ExchangeRatesResponse) String() string            { return proto.CompactTextString(m) }
func (*ExchangeRatesResponse) ProtoMessage()               {}
func (*ExchangeRatesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ExchangeRatesResponse) GetData() []*ExchangeRateResponse {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*EmptyRequest)(nil), "currency.EmptyRequest")
	proto.RegisterType((*ExchangeRateResponse)(nil), "currency.ExchangeRateResponse")
	proto.RegisterType((*ExchangeRatesResponse)(nil), "currency.ExchangeRatesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Currency service

type CurrencyClient interface {
	// Get all exchange rates - A server-to-client streaming RPC.
	GetExchangeRates(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (Currency_GetExchangeRatesClient, error)
}

type currencyClient struct {
	cc *grpc.ClientConn
}

func NewCurrencyClient(cc *grpc.ClientConn) CurrencyClient {
	return &currencyClient{cc}
}

func (c *currencyClient) GetExchangeRates(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (Currency_GetExchangeRatesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Currency_serviceDesc.Streams[0], c.cc, "/currency.Currency/GetExchangeRates", opts...)
	if err != nil {
		return nil, err
	}
	x := &currencyGetExchangeRatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Currency_GetExchangeRatesClient interface {
	Recv() (*ExchangeRatesResponse, error)
	grpc.ClientStream
}

type currencyGetExchangeRatesClient struct {
	grpc.ClientStream
}

func (x *currencyGetExchangeRatesClient) Recv() (*ExchangeRatesResponse, error) {
	m := new(ExchangeRatesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Currency service

type CurrencyServer interface {
	// Get all exchange rates - A server-to-client streaming RPC.
	GetExchangeRates(*EmptyRequest, Currency_GetExchangeRatesServer) error
}

func RegisterCurrencyServer(s *grpc.Server, srv CurrencyServer) {
	s.RegisterService(&_Currency_serviceDesc, srv)
}

func _Currency_GetExchangeRates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CurrencyServer).GetExchangeRates(m, &currencyGetExchangeRatesServer{stream})
}

type Currency_GetExchangeRatesServer interface {
	Send(*ExchangeRatesResponse) error
	grpc.ServerStream
}

type currencyGetExchangeRatesServer struct {
	grpc.ServerStream
}

func (x *currencyGetExchangeRatesServer) Send(m *ExchangeRatesResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Currency_serviceDesc = grpc.ServiceDesc{
	ServiceName: "currency.Currency",
	HandlerType: (*CurrencyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetExchangeRates",
			Handler:       _Currency_GetExchangeRates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "currency.proto",
}

func init() { proto.RegisterFile("currency.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xdd, 0xb6, 0x89, 0x75, 0x2a, 0x45, 0x96, 0x5a, 0x06, 0x0f, 0xba, 0xe4, 0x94, 0x53,
	0x91, 0xf8, 0x08, 0x5a, 0x3c, 0x78, 0x10, 0xf6, 0xea, 0x69, 0x9b, 0x0c, 0x1a, 0xd0, 0xcd, 0x36,
	0x3b, 0x81, 0xf6, 0x9d, 0x7c, 0x48, 0xe9, 0xa6, 0x0d, 0x2b, 0xf4, 0xf8, 0xfd, 0x0c, 0xdf, 0xfe,
	0xfb, 0xc3, 0xbc, 0xec, 0xda, 0x96, 0x6c, 0xb9, 0x5f, 0xb9, 0xb6, 0xe1, 0x46, 0x4e, 0x4f, 0x9c,
	0xcd, 0xe1, 0x7a, 0xfd, 0xe3, 0x78, 0xaf, 0x69, 0xdb, 0x91, 0xe7, 0xec, 0x57, 0xc0, 0x62, 0xbd,
	0x2b, 0xbf, 0x8c, 0xfd, 0x24, 0x6d, 0x98, 0x34, 0x79, 0xd7, 0x58, 0x4f, 0x72, 0x01, 0x09, 0xd7,
	0xfc, 0x4d, 0x28, 0x94, 0xc8, 0xaf, 0x74, 0x0f, 0x12, 0xe1, 0xd2, 0x75, 0x9b, 0x17, 0xc3, 0x84,
	0xa3, 0x90, 0x9f, 0x50, 0x2a, 0x98, 0x55, 0xe4, 0xcb, 0xb6, 0x76, 0x5c, 0x37, 0x16, 0xc7, 0x4a,
	0xe4, 0x23, 0x1d, 0x47, 0x07, 0xe3, 0xb6, 0x33, 0x96, 0x71, 0xa2, 0x44, 0x9e, 0xe8, 0x1e, 0x0e,
	0x69, 0x6d, 0x2b, 0xda, 0x61, 0xd2, 0xbf, 0x13, 0x40, 0x2e, 0x21, 0xed, 0x3b, 0x61, 0x1a, 0x44,
	0x47, 0xca, 0xde, 0xe0, 0x36, 0x6e, 0xeb, 0x87, 0xba, 0x05, 0x4c, 0x2a, 0xc3, 0x06, 0x85, 0x1a,
	0xe7, 0xb3, 0xe2, 0x7e, 0x35, 0x0c, 0x70, 0xee, 0x73, 0x3a, 0xdc, 0x16, 0x1f, 0x30, 0x7d, 0x3e,
	0x9e, 0xc9, 0x77, 0xb8, 0x79, 0x25, 0xfe, 0xe7, 0x96, 0xcb, 0xc8, 0x12, 0x6d, 0x76, 0xf7, 0x70,
	0xde, 0x3e, 0x94, 0xc9, 0x2e, 0x1e, 0xc5, 0x26, 0x0d, 0xcb, 0x3f, 0xfd, 0x05, 0x00, 0x00, 0xff,
	0xff, 0x55, 0x61, 0x24, 0x2f, 0x8b, 0x01, 0x00, 0x00,
}
