// Code generated by protoc-gen-go. DO NOT EDIT.
// source: data.proto

/*
Package grpc is a generated protocol buffer package.

It is generated from these files:
	data.proto

It has these top-level messages:
	EmptyRequest
	ExchangeRateResponse
	ExchangeRatesResponse
	WeatherRequest
	WeatherResponse
*/
package grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc1 "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EmptyRequest struct {
}

func (m *EmptyRequest) Reset()                    { *m = EmptyRequest{} }
func (m *EmptyRequest) String() string            { return proto.CompactTextString(m) }
func (*EmptyRequest) ProtoMessage()               {}
func (*EmptyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// https://developers.google.com/protocol-buffers/docs/proto3#scalar
type ExchangeRateResponse struct {
	Title       string  `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	PubDate     string  `protobuf:"bytes,2,opt,name=pubDate" json:"pubDate,omitempty"`
	Description float32 `protobuf:"fixed32,3,opt,name=description" json:"description,omitempty"`
	Quant       int32   `protobuf:"varint,4,opt,name=quant" json:"quant,omitempty"`
	Index       string  `protobuf:"bytes,5,opt,name=index" json:"index,omitempty"`
	Change      float32 `protobuf:"fixed32,6,opt,name=change" json:"change,omitempty"`
}

func (m *ExchangeRateResponse) Reset()                    { *m = ExchangeRateResponse{} }
func (m *ExchangeRateResponse) String() string            { return proto.CompactTextString(m) }
func (*ExchangeRateResponse) ProtoMessage()               {}
func (*ExchangeRateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ExchangeRateResponse) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ExchangeRateResponse) GetPubDate() string {
	if m != nil {
		return m.PubDate
	}
	return ""
}

func (m *ExchangeRateResponse) GetDescription() float32 {
	if m != nil {
		return m.Description
	}
	return 0
}

func (m *ExchangeRateResponse) GetQuant() int32 {
	if m != nil {
		return m.Quant
	}
	return 0
}

func (m *ExchangeRateResponse) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *ExchangeRateResponse) GetChange() float32 {
	if m != nil {
		return m.Change
	}
	return 0
}

type ExchangeRatesResponse struct {
	Data []*ExchangeRateResponse `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (m *ExchangeRatesResponse) Reset()                    { *m = ExchangeRatesResponse{} }
func (m *ExchangeRatesResponse) String() string            { return proto.CompactTextString(m) }
func (*ExchangeRatesResponse) ProtoMessage()               {}
func (*ExchangeRatesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ExchangeRatesResponse) GetData() []*ExchangeRateResponse {
	if m != nil {
		return m.Data
	}
	return nil
}

type WeatherRequest struct {
	Latitude  float64 `protobuf:"fixed64,1,opt,name=latitude" json:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude" json:"longitude,omitempty"`
}

func (m *WeatherRequest) Reset()                    { *m = WeatherRequest{} }
func (m *WeatherRequest) String() string            { return proto.CompactTextString(m) }
func (*WeatherRequest) ProtoMessage()               {}
func (*WeatherRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *WeatherRequest) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *WeatherRequest) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

type WeatherResponse struct {
	Temp     float64 `protobuf:"fixed64,1,opt,name=temp" json:"temp,omitempty"`
	Pressure float64 `protobuf:"fixed64,2,opt,name=pressure" json:"pressure,omitempty"`
	Humidity float64 `protobuf:"fixed64,3,opt,name=humidity" json:"humidity,omitempty"`
}

func (m *WeatherResponse) Reset()                    { *m = WeatherResponse{} }
func (m *WeatherResponse) String() string            { return proto.CompactTextString(m) }
func (*WeatherResponse) ProtoMessage()               {}
func (*WeatherResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *WeatherResponse) GetTemp() float64 {
	if m != nil {
		return m.Temp
	}
	return 0
}

func (m *WeatherResponse) GetPressure() float64 {
	if m != nil {
		return m.Pressure
	}
	return 0
}

func (m *WeatherResponse) GetHumidity() float64 {
	if m != nil {
		return m.Humidity
	}
	return 0
}

func init() {
	proto.RegisterType((*EmptyRequest)(nil), "grpc.EmptyRequest")
	proto.RegisterType((*ExchangeRateResponse)(nil), "grpc.ExchangeRateResponse")
	proto.RegisterType((*ExchangeRatesResponse)(nil), "grpc.ExchangeRatesResponse")
	proto.RegisterType((*WeatherRequest)(nil), "grpc.WeatherRequest")
	proto.RegisterType((*WeatherResponse)(nil), "grpc.WeatherResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion4

// Client API for GrpcService service

type GrpcServiceClient interface {
	// Get all exchange rates - A server-to-client streaming RPC.
	GetExchangeRates(ctx context.Context, in *EmptyRequest, opts ...grpc1.CallOption) (GrpcService_GetExchangeRatesClient, error)
	// Get weather info - A server-to-client streaming RPC.
	GetWeatherInfo(ctx context.Context, in *WeatherRequest, opts ...grpc1.CallOption) (GrpcService_GetWeatherInfoClient, error)
}

type grpcServiceClient struct {
	cc *grpc1.ClientConn
}

func NewGrpcServiceClient(cc *grpc1.ClientConn) GrpcServiceClient {
	return &grpcServiceClient{cc}
}

func (c *grpcServiceClient) GetExchangeRates(ctx context.Context, in *EmptyRequest, opts ...grpc1.CallOption) (GrpcService_GetExchangeRatesClient, error) {
	stream, err := grpc1.NewClientStream(ctx, &_GrpcService_serviceDesc.Streams[0], c.cc, "/grpc.GrpcService/GetExchangeRates", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcServiceGetExchangeRatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GrpcService_GetExchangeRatesClient interface {
	Recv() (*ExchangeRatesResponse, error)
	grpc1.ClientStream
}

type grpcServiceGetExchangeRatesClient struct {
	grpc1.ClientStream
}

func (x *grpcServiceGetExchangeRatesClient) Recv() (*ExchangeRatesResponse, error) {
	m := new(ExchangeRatesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcServiceClient) GetWeatherInfo(ctx context.Context, in *WeatherRequest, opts ...grpc1.CallOption) (GrpcService_GetWeatherInfoClient, error) {
	stream, err := grpc1.NewClientStream(ctx, &_GrpcService_serviceDesc.Streams[1], c.cc, "/grpc.GrpcService/GetWeatherInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcServiceGetWeatherInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GrpcService_GetWeatherInfoClient interface {
	Recv() (*WeatherResponse, error)
	grpc1.ClientStream
}

type grpcServiceGetWeatherInfoClient struct {
	grpc1.ClientStream
}

func (x *grpcServiceGetWeatherInfoClient) Recv() (*WeatherResponse, error) {
	m := new(WeatherResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GrpcService service

type GrpcServiceServer interface {
	// Get all exchange rates - A server-to-client streaming RPC.
	GetExchangeRates(*EmptyRequest, GrpcService_GetExchangeRatesServer) error
	// Get weather info - A server-to-client streaming RPC.
	GetWeatherInfo(*WeatherRequest, GrpcService_GetWeatherInfoServer) error
}

func RegisterGrpcServiceServer(s *grpc1.Server, srv GrpcServiceServer) {
	s.RegisterService(&_GrpcService_serviceDesc, srv)
}

func _GrpcService_GetExchangeRates_Handler(srv interface{}, stream grpc1.ServerStream) error {
	m := new(EmptyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcServiceServer).GetExchangeRates(m, &grpcServiceGetExchangeRatesServer{stream})
}

type GrpcService_GetExchangeRatesServer interface {
	Send(*ExchangeRatesResponse) error
	grpc1.ServerStream
}

type grpcServiceGetExchangeRatesServer struct {
	grpc1.ServerStream
}

func (x *grpcServiceGetExchangeRatesServer) Send(m *ExchangeRatesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GrpcService_GetWeatherInfo_Handler(srv interface{}, stream grpc1.ServerStream) error {
	m := new(WeatherRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcServiceServer).GetWeatherInfo(m, &grpcServiceGetWeatherInfoServer{stream})
}

type GrpcService_GetWeatherInfoServer interface {
	Send(*WeatherResponse) error
	grpc1.ServerStream
}

type grpcServiceGetWeatherInfoServer struct {
	grpc1.ServerStream
}

func (x *grpcServiceGetWeatherInfoServer) Send(m *WeatherResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _GrpcService_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "grpc.GrpcService",
	HandlerType: (*GrpcServiceServer)(nil),
	Methods:     []grpc1.MethodDesc{},
	Streams: []grpc1.StreamDesc{
		{
			StreamName:    "GetExchangeRates",
			Handler:       _GrpcService_GetExchangeRates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetWeatherInfo",
			Handler:       _GrpcService_GetWeatherInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "data.proto",
}

func init() { proto.RegisterFile("data.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0xc1, 0x6e, 0xe2, 0x30,
	0x14, 0x5c, 0x43, 0x60, 0x97, 0xc7, 0x8a, 0x5d, 0x59, 0xb0, 0xb2, 0xb2, 0x3d, 0x44, 0x39, 0xe5,
	0x14, 0x55, 0xf4, 0x0b, 0x2a, 0x15, 0x45, 0xed, 0xd1, 0x3d, 0xf4, 0xd4, 0x83, 0x49, 0x5e, 0xc1,
	0x12, 0x24, 0xc6, 0x79, 0xa9, 0xe0, 0x53, 0xfa, 0x0f, 0xfd, 0xc8, 0x2a, 0x4e, 0x08, 0xd0, 0xf6,
	0x96, 0x99, 0x17, 0xcf, 0x9b, 0x19, 0x1b, 0x20, 0x53, 0xa4, 0x62, 0x63, 0x0b, 0x2a, 0xb8, 0xb7,
	0xb2, 0x26, 0x0d, 0x27, 0xf0, 0x7b, 0xb1, 0x35, 0x74, 0x90, 0xb8, 0xab, 0xb0, 0xa4, 0xf0, 0x9d,
	0xc1, 0x74, 0xb1, 0x4f, 0xd7, 0x2a, 0x5f, 0xa1, 0x54, 0x84, 0x12, 0x4b, 0x53, 0xe4, 0x25, 0xf2,
	0x29, 0x0c, 0x48, 0xd3, 0x06, 0x05, 0x0b, 0x58, 0x34, 0x92, 0x0d, 0xe0, 0x02, 0x7e, 0x9a, 0x6a,
	0x79, 0xa7, 0x08, 0x45, 0xcf, 0xf1, 0x47, 0xc8, 0x03, 0x18, 0x67, 0x58, 0xa6, 0x56, 0x1b, 0xd2,
	0x45, 0x2e, 0xfa, 0x01, 0x8b, 0x7a, 0xf2, 0x9c, 0xaa, 0x15, 0x77, 0x95, 0xca, 0x49, 0x78, 0x01,
	0x8b, 0x06, 0xb2, 0x01, 0x35, 0xab, 0xf3, 0x0c, 0xf7, 0x62, 0xd0, 0xec, 0x71, 0x80, 0xff, 0x83,
	0x61, 0xe3, 0x49, 0x0c, 0x9d, 0x50, 0x8b, 0xc2, 0x04, 0x66, 0xe7, 0x6e, 0xcb, 0xce, 0x6e, 0x0c,
	0x5e, 0x9d, 0x55, 0xb0, 0xa0, 0x1f, 0x8d, 0xe7, 0x7e, 0x5c, 0x87, 0x8d, 0xbf, 0x0b, 0x26, 0xdd,
	0x7f, 0xe1, 0x03, 0x4c, 0x9e, 0x50, 0xd1, 0x1a, 0x6d, 0xdb, 0x04, 0xf7, 0xe1, 0xd7, 0x46, 0x91,
	0xa6, 0x2a, 0x6b, 0x32, 0x33, 0xd9, 0x61, 0x7e, 0x05, 0xa3, 0x4d, 0x91, 0xaf, 0x9a, 0x61, 0xcf,
	0x0d, 0x4f, 0x44, 0xf8, 0x0c, 0x7f, 0x3a, 0xad, 0xd6, 0x0e, 0x07, 0x8f, 0x70, 0x6b, 0x5a, 0x21,
	0xf7, 0x5d, 0x2f, 0x30, 0x16, 0xcb, 0xb2, 0xb2, 0x47, 0x8d, 0x0e, 0xd7, 0xb3, 0x75, 0xb5, 0xd5,
	0x99, 0xa6, 0x83, 0xab, 0x8e, 0xc9, 0x0e, 0xcf, 0xdf, 0x18, 0x8c, 0x13, 0x6b, 0xd2, 0x47, 0xb4,
	0xaf, 0x3a, 0x45, 0x9e, 0xc0, 0xdf, 0x04, 0xe9, 0xa2, 0x06, 0xce, 0xdb, 0xc0, 0x67, 0x57, 0xeb,
	0xff, 0xff, 0x5a, 0x42, 0xd7, 0x57, 0xf8, 0xe3, 0x9a, 0xf1, 0x5b, 0x98, 0x24, 0x48, 0xad, 0xf5,
	0xfb, 0xfc, 0xa5, 0xe0, 0xd3, 0xe6, 0xc8, 0x65, 0x33, 0xfe, 0xec, 0x13, 0x7b, 0x92, 0x58, 0x0e,
	0xdd, 0xdb, 0xba, 0xf9, 0x08, 0x00, 0x00, 0xff, 0xff, 0x1d, 0x75, 0x87, 0x5f, 0x69, 0x02, 0x00,
	0x00,
}
